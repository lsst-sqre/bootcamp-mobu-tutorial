#+OPTIONS: toc:nil num:nil
#+REVEAL_ROOT: reveal.js
#+REVEAL_HLEVEL: 2
#+REVEAL_THEME: white
#+REVEAL_EXTRA_CSS: ./local.css
#+REVEAL_INIT_OPTIONS: slideNumber: 'c/t'
#+REVEAL_PLUGINS: (highlight)
#+AUTHOR: Adam Thornton
#+EMAIL: athornton@lsst.org
#+TITLE: Using Mobu to test Phalanx Services

* Using Mobu to test Phalanx Services

This is intended as a short guide to creating a test Python notebook to
be run under [[https://github.com/lsst-sqre/mobu][Mobu]].

It assumes that the service under test is a FastAPI service designed to
run in [[https://phalanx.lsst.io][Phalanx]].

[[./assets/qr-code.png]]

https://github.com/lsst-sqre/bootcamp-mobu-tutorial.git

** What's Mobu?

[[https://github.com/lsst-sqre/mobu][Mobu]] is our framework for an automated test harness for [[https://phalanx.lsst.io][Phalanx]].

"Mobu" is a contraction of "Monkey Business"; this in turn is a nod to
[[https://netflix.github.io/chaosmonkey/][Chaos Monkey]], a Netflix testing framework.

** How is it used?

[[https://github.com/lsst-sqre/mobu][Mobu]] is primarily used to generate alerts in Slack status channels, to
let us know that something is broken.

It's where things like this come from:

[[./assets/slack.png]]

** Monkey Flocks

Each thread of testing execution, roughly speaking, is a Monkey.  Monkeys
come in Flocks.

[[./assets/351px-BauW170B.jpg]]
# Image: W.W. Denslow, 1900, public domain

** What does Mobu do?

[[https://github.com/lsst-sqre/phalanx/tree/main/applications/mobu][Mobu]] runs zero or more Flocks, repeatedly, and reports errors from its
runs (usually via Slack).

[[https://github.com/lsst-sqre/phalanx/tree/main/applications/mobu][Mobu]] is part of  [[https://phalanx.lsst.io][Phalanx]] and will normally have been configured with a
Slack Channel and appropriate webhooks for a particular [[https://phalanx.lsst.io][Phalanx]]
environment by that environment's administrators.

All you should have to do is write the content that a Flock will execute
and add that to [[https://github.com/lsst-sqre/phalanx/tree/main/applications/mobu][Mobu]]'s autostart configuration.

** Flock Types

Flocks can be of many types: some can run notebooks, some can perform TAP
queries, some exercise GitLFS, etc.

The NotebookRunner is the most mature, and currently the only one we
recommend for use by external teams.

** NotebookRunner

A NotebookRunner is defined by two main parameters:

 * The URL of the Git repository where the notebooks to be run reside
 * The branch to use when running those notebooks

All Python notebooks in the root directory of that repository will be run.

*** Python Execution Context

[[https://github.com/lsst-sqre/phalanx/tree/main/applications/mobu][Mobu]] runs Python within the context of a Jupyter Notebook running in
[[https://nublado.lsst.io/][Nublado]].

That notebook will be run as a particular user known to Gafaelfawr (or
specified to Gafaelfawr), and will have the usual set of filesystems
mounted.

This implies that any services and Python modules available in the
Python kernel for that instance are present.

In general, though, you don't need the full range of DM Stack capabilities to
test your [[https://phalanx.lsst.io][Phalanx]] Services.

*** What do you need?

[[https://phalanx.lsst.io][Phalanx]] FastAPI services are REST HTTP APIs that return JSON.  So what
you need is:

 * knowledge of the service endpoint
 * an HTTP client
 * a token authenticating you to the service

*** What does this look like?

You will be performing an end-to-end test of your service.

This will fundamentally look very much like the external handler unit
tests for that service, because that's all you're really doing: you're
hitting an endpoint which is routed through an external handler.

*** Do it differently

However, if you just copy the tests from the service test suite, that's
kind of boring.

We know this is a FastAPI [[https://phalanx.lsst.io][Phalanx]] service...which means we have
autogenerated API documentation built into the service itself.

Building test notebooks from that documentation is an excellent way to
make sure you've implemented what you claim to have.

** Working Example

We're going to be using Jonathan Sick's [[https://github.com/lsst-sqre/fastapi-bootcamp][FastAPI Bootcamp]] example
application for this example.

*** Determine the API

If you've used the SQuaRE application templates, your FastAPI service
will have documentation under its =/redoc= endpoint.  (Or =/docs= or the
raw =/openapi.json=; I prefer =/redoc=.)

In our case, that means that the URL relative to the [[https://phalanx.lsst.io][Phalanx]] base URL
must be =/fastapi-bootcamp/redoc=.

*** Leverage Nublado

[[https://nublado.lsst.io/][Nublado]] provides conveniences to its users.  The ones we care about here
are:

 * The base URL of the Phalanx installation is available as
  =$EXTERNAL_INSTANCE_URL= (or as the contents of
   =/opt/lsst/software/jupyterlab/environment/EXTERNAL_INSTANCE_URL=)
 * A Gafaelfawr token for the current user is available in
   =/opt/lsst/software/jupyterlab/secrets/token=

The =httpx= module is present by default and is generally what I prefer
to use for an HTTP client.  =requests= and =aiohttp= are also installed.

*** Get started: create an HTTP client

#+NAME: httpx_client
#+BEGIN_SRC python
import httpx
from pathlib import Path

# Set up our session parameters
svc_endpoint="/fastapi-bootcamp"
jl_dir=Path("/opt/lsst/software/jupyterlab")
tok = (jl_dir / "secrets" / "token").read_text().strip()
inst_url = (jl_dir / "environment" / "EXTERNAL_INSTANCE_URL").read_text().strip()
http_headers = { "Authorization": f"Bearer {tok}",
                 "Content-Type": "application/json"
               }
svc_root = f"{inst_url}{svc_endpoint}"

# Create a configured client

http_client = httpx.AsyncClient(
                  follow_redirects=True,
                  base_url=svc_root,
                  headers=http_headers
              )
#+END_SRC

*** Now put the two together

Pick a method in the API and make a request to that endpoint.  Check
whether the response is what you expect.  =assert()= is perfect for
this, because you do indeed want to raise an exception if something goes
wrong.

#+NAME: test_svc
#+BEGIN_SRC python
resp = (await http_client.get("/astroplan/observers/")).json()
observer_list = [x["id"] for x in resp]
assert "gemini-north" in observer_list
#+END_SRC

*** Repeat until done

Do this for each method you plan to test.

You should put your tests in a notebook named after your service, in the
[[https://github.com/lsst-sqre/system-test][system-test]] repository, on its own branch.

For the example service, this can be found at [[https://github.com/lsst-sqre/system-test/blob/square-bootcamp/fastapi-bootcamp.ipynb][fastapi-bootcamp.ipynb]].

** Configure Mobu

First you will get [[https://github.com/lsst-sqre/phalanx/tree/main/applications/mobu][Mobu]] running your new flock by hand; then you will
configure [[https://github.com/lsst-sqre/phalanx/tree/main/applications/mobu][Mobu]] to autostart that flock when it begins running.

*** Set up a virtual environment

First, clone the [[https://github.com/lsst-sqre/mobu][Mobu repository]].  Change to its directory.

Create a new virtualenv and activate it:
  * =python3 -m venv /path/to/venv=
  * =. /path/to/venv/bin/activate=

Now run =make init=.  This will install a development version of =mobu=
and its helper tool =monkeyflocker= in your virtual environment.

*** Acquire an access token for your environment

Go to =/auth/tokens= within your [[https://phalanx.lsst.io][Phalanx]] environment.

Create a token with the access =mobu= requires (usually =exec:admin=).
If you don't have this access, you will need to negotiate with your
Phalanx site administrator for one of:

  * =exec:admin= for your user
  * =mobu= to require a less restrictive scope that you already belong to
  * the administrator to run the following commands for you

Save this token in an environment variable such as =MOBU_TOKEN=.

*** Write a flock definition

The [[https://github.com/lsst-sqre/phalanx][Phalanx repository]] contains many definitions of flocks under
=applications/mobu= in the site-specific values files.

The one you write should look something like:

#+NAME: flock_yaml
#+BEGIN_SRC yaml
name: fastapi-bootcamp
count: 1
users:
  - username: bot-mobu-fastapi-bootcamp
    uidnumber: 93001
    gidnumber: 93001
scopes:
  - read:image
  - exec:notebook
business:
  options:
    repo_branch: square-bootcamp
    repo_url: https://github.com/lsst-sqre/system-test.git
  restart: true
  type: NotebookRunner
#+END_SRC

Note that in addition to the scope you need for the service
(=read:image=) you also need =exec:notebook= since the test runs as a
notebook.

*** Create the flock

While you could create the flock by sending requests directly to the
[[https://github.com/lsst-sqre/phalanx/tree/main/applications/mobu][Mobu]] API, there is an easier way: the =monkeyflocker= command.

Run =monkeyflocker start -e https://demo.lsst.cloud -f flock.yaml -k
$MOBU_TOKEN=

You can watch the [[https://github.com/lsst-sqre/phalanx/tree/main/applications/mobu][Mobu]] logs to see what's happening.

*** Iterating

Your flock will probably not work right the first time.  You can stop it
so you can tweak the payload or definitions with:

=monkeyflocker stop -e https://demo.lsst.cloud fastapi-bootcamp -k
$MOBU_TOKEN=

Eventually it will be right, and you will be ready to add the flock to
Phalanx.

*** Add the flock to Phalanx

Create a PR to add the YAML representation of the flock you just tested
to [[https://github.com/lsst-sqre/phalanx/tree/main/applications/mobu][Mobu]] in the site-specific values YAML file as a list item under the
=config.autostart= key.  Once merged, when [[https://github.com/lsst-sqre/phalanx/tree/main/applications/mobu][Mobu]] is restarted, it will
begin running the test automatically, and reporting errors in the
site-specific Slack channel.

** Questions

This presentation:

https://github.com/lsst-sqre/bootcamp-mobu-tutorial.git

[[./assets/qr-code.png]]
