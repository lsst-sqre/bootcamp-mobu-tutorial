#+OPTIONS: toc:nil num:nil
#+REVEAL_ROOT: ./reveal.js
#+REVEAL_HLEVEL: 2
#+REVEAL_THEME: white
#+REVEAL_EXTRA_CSS: ./local.css
#+REVEAL_INIT_OPTIONS: slideNumber: 'c/t'
#+REVEAL_PLUGINS: (highlight)
#+AUTHOR: Adam Thornton
#+EMAIL: athornton@lsst.org
#+TITLE: Using Mobu to test Phalanx Services

* Using Mobu to test Phalanx Services

This is intended as a short guide to creating a test Python notebook to
be run under [[https://github.com/lsst-sqre/mobu][Mobu]].

It assumes that the service under test is a FastAPI service designed to
run in [[https://phalanx.lsst.io][Phalanx]].

[[./assets/qr-code.png]]

https://github.com/lsst-sqre/bootcamp-mobu-tutorial.git

** What's Mobu?

[[https://github.com/lsst-sqre/mobu][Mobu]] is our framework for an automated test harness for [[https://phalanx.lsst.io][Phalanx]].

"Mobu" is a contraction of "Monkey Business"; this in turn is a nod to
[[https://netflix.github.io/chaosmonkey/][Chaos Monkey]], a Netflix testing framework.

** How is it used?

[[https://github.com/lsst-sqre/mobu][Mobu]] is primarily used to generate alerts in Slack status channels, to
let us know that something is broken.

If you have a [[https://phalanx.lsst.io][Phalanx]] service running at a site, in general there should
be a corresponding flock testing whether it is working correctly.

Mobu is where messages like this (in all the =#status-= channels) come
from:

[[./assets/slack.png]]

** Monkey Flocks

Each thread of testing execution, roughly speaking, is a Monkey.  Monkeys
are organized into Flocks.

[[./assets/351px-BauW170B.jpg]]
# Image: W.W. Denslow, 1900, public domain

** What does Mobu do?

[[https://github.com/lsst-sqre/phalanx/tree/main/applications/mobu][Mobu]] runs zero or more Flocks, repeatedly, and reports errors from its
runs (usually via Slack).

[[https://github.com/lsst-sqre/phalanx/tree/main/applications/mobu][Mobu]] is part of  [[https://phalanx.lsst.io][Phalanx]] and will normally have been configured with a
Slack channel and appropriate webhooks for a particular [[https://phalanx.lsst.io][Phalanx]]
environment by that environment's administrators.

A service author's responsibility is to write the content that a Flock
will execute.

Adding that content to Mobu's autostart configuration is generally a
site administrator's job, not a developer's.

** Flock Types

Flocks can be of many types: some can run notebooks, some can perform TAP
queries, some exercise GitLFS, etc.

The NotebookRunner is the most mature, and currently the only one we
recommend for use by external teams.

** NotebookRunner

A NotebookRunner is defined by two main parameters:

 * The URL of the Git repository where the notebooks to be run reside
 * The branch to use when running those notebooks

All Python notebooks in the root directory of that repository will be
run.

This is subject to change: see [[https://sqr-080.lsst.io][sqr-080]] for our roadmap.

*** Python Execution Context

[[https://github.com/lsst-sqre/phalanx/tree/main/applications/mobu][Mobu]] runs Python within the context of a Jupyter Notebook running in
[[https://nublado.lsst.io/][Nublado]].

That notebook will be run as a particular user known to Gafaelfawr (or
specified to Gafaelfawr), and will have the usual set of filesystems
mounted.

This implies that any services and Python modules available in the
Python kernel for that instance are present.

In general, though, you likely will not need the full range of DM Stack
capabilities to test your [[https://phalanx.lsst.io][Phalanx]] Services.

*** What do you need?

[[https://phalanx.lsst.io][Phalanx]] FastAPI services are REST HTTP APIs that return JSON.  So what
you need is:

 * knowledge of the service endpoints
 * an HTTP client
 * a token authenticating you to the service

*** What does this look like?

You will be performing an end-to-end test of your service.

This will fundamentally look very much like the external handler unit
tests for that service, because that's all you're really doing: you're
hitting an endpoint which is routed through an external handler.

*** Don't just copy the handler tests

  * That's really boring
  * Not the worst place to start, but don't stop there
  * Your unit tests probably mocked out the storage.  The whole point of
    Mobu is to perform real end-to-end tests

*** Use the platform resources

If you have built your [[https://phalanx.lsst.io][Phalanx]] service from the template, as you should,
you will have autogenerated API documentation built into the service
itself.

Building test notebooks from that documentation is an excellent way to
make sure you've implemented what you claim to have.

If you cannot implement the tests from the API documentation, either
your service or your documentation needs fixing.

** Working Example

We're going to be using Jonathan Sick's [[https://github.com/lsst-sqre/fastapi-bootcamp][FastAPI Bootcamp]] example
application for this example.

*** Determine the API

If you've used the SQuaRE application templates, your FastAPI service
will have documentation under its =/redoc= endpoint.  (Or =/docs= or the
raw =/openapi.json=; I prefer =/redoc=.)

In our case, that means that the URL relative to the [[https://phalanx.lsst.io][Phalanx]] base URL
must be [[https://demo.lsst.cloud/fastapi-bootcamp/redoc][=/fastapi-bootcamp/redoc=]].

*** Leverage Nublado

[[https://nublado.lsst.io/][Nublado]] provides conveniences to its users.  The ones we care about here
are:

 * The base URL of the [[https://phalanx.lsst.io][Phalanx]] installation is available as
  =$EXTERNAL_INSTANCE_URL= (or as the contents of
   =/opt/lsst/software/jupyterlab/environment/EXTERNAL_INSTANCE_URL=)
 * A Gafaelfawr token for the current user is available in
   =/opt/lsst/software/jupyterlab/secrets/token=
 * But really, we want =lsst.rsp.RSPClient= which uses both of those

*** Get started: create an HTTP client

#+NAME: httpx_client
#+BEGIN_SRC python
# RSPClient is in "recommended" as of 09 May 2024, and in w_2024_19 and later
# For earlier images, you'll need to construct your own client.

from lsst.rsp import RSPClient

http_client = RSPClient("/fastapi-bootcamp")
#+END_SRC

*** Now put the two together

Pick a method in the API and make a request to that endpoint.  Check
whether the response is what you expect.

You're basically writing a unit test.

Once you've picked the response to check, =assert()= is perfect: you do
indeed want to raise an exception if something goes wrong.

#+NAME: test_svc
#+BEGIN_SRC python
resp = (await http_client.get("/astroplan/observers/")).json()
observer_list = [x["id"] for x in resp]
assert "gemini-north" in observer_list
#+END_SRC

*** Repeat until done

Do this for each method you plan to test.

Once you're done, you should have a notebook named after your service.

Please make sure you save your notebooks with outputs cleared (but see
the next slide).

*** What repository?

Because Mobu has hitherto been an internal service for us, SQuaRE has
been using the [[https://github.com/lsst-sqre/system-test][system-test]] repository.  For right now, go ahead and use
that; clone it, branch it, and put your content on your own branch.

If you're doing that, make a virtualenv, install pre-commit to it, and
run =make init= in it, and pre-commit output clearing will be enforced.
If you're developing on an RSP instance, you only need =make init=.

This may change as we figure out how to make Mobu a general development
service rather than a SQuaRE internal toolkit.

For the example service, our testing notebook can be found in
[[https://github.com/lsst-sqre/system-test][system-test]] on the =square-bootcamp= branch.  It is called
[[https://github.com/lsst-sqre/system-test/blob/square-bootcamp/fastapi-bootcamp.ipynb][fastapi-bootcamp.ipynb]].

** Configure Mobu

Mobu needs to be set up to automatically run that notebook and report
failures at each site you intend your service to run.

*** Actual Currently Recommended Practice

  * Get your notebook running correctly
  * Ask your RSP site administrator to get it into the Mobu autostart
    configuration
  * Sit back and let them do the work

*** Multiple Sites and Site-Types

If you want to run at multiple sites, talk to each one's administrator.
In the near future (already the case at IDF and USDF) there will be an
environment variable, =$RSP_SITE_TYPE=, that tells you whether that site
type is =science= (IDF) or =staff= (USDF).  Soon: =telescope= (T&S).

*** Current practice is likely to change

First you will get [[https://github.com/lsst-sqre/phalanx/tree/main/applications/mobu][Mobu]] running your new flock by hand; then you will
configure [[https://github.com/lsst-sqre/phalanx/tree/main/applications/mobu][Mobu]] to autostart that flock when it begins running.

This is how we do this now.

It's OK if you tune out here.  I'm going to be going extremely fast
through the next stages, because we almost certainly will have a better
way to get your testing notebooks running by Fall 2024.

*** Current practice: prepare the environment

  * Set up a virtual environment, activate it, and clone the [[https://github.com/lsst-sqre/mobu][Mobu repository]]
  * Run =make init= to get =monkeyflocker= on your path
  * Get an access token (via [[https://demo.lsst.cloud/auth/tokens][/auth/tokens]]) that lets you use the Mobu
    API
      * You probably don't actually have permissions anywhere but
        [[https://demo.lsst.cloud][demo.lsst.cloud]]
      * [[https://sqr-080.lsst.io][sqr-080]] recognizes the problem; for now, ask your site
        administrator

*** Current practice: define the flock YAML

  * You will find it in [[https://phalanx.lsst.io][Phalanx]] under =applications/mobu=
  * The various environment values files contain many examples

#+NAME: flock_yaml
#+BEGIN_SRC yaml
name: fastapi-bootcamp
count: 1
users:
  - username: bot-mobu-fastapi-bootcamp
    uidnumber: 93001
    gidnumber: 93001
scopes:
  - read:image
  - exec:notebook
business:
  options:
    repo_branch: square-bootcamp
    repo_url: https://github.com/lsst-sqre/system-test.git
  restart: true
  type: NotebookRunner
#+END_SRC

*** Current practice: test the flock

  * =monkeyflocker start -e https://demo.lsst.cloud -f flock.yaml -k $MOBU_TOKEN=
  * Swear.  If you can't think of anything, I find that "monkey
    ... /flocker/!" works pretty well
  * =monkeyflocker stop -e https://demo.lsst.cloud fastapi-bootcamp -k $MOBU_TOKEN=
  * Tweak the YAML
  * Try again

*** Current practice: add the flock to Phalanx

Create a PR to add the YAML representation of the flock you just tested
to [[https://github.com/lsst-sqre/phalanx/tree/main/applications/mobu][Mobu]] in the site-specific values YAML file as a list item under the
=config.autostart= key.

Once merged, when [[https://github.com/lsst-sqre/phalanx/tree/main/applications/mobu][Mobu]] is restarted, it will begin running the test
automatically, and reporting errors in the site-specific Slack channel.

** Questions

This presentation:

https://github.com/lsst-sqre/bootcamp-mobu-tutorial.git

[[./assets/qr-code.png]]
